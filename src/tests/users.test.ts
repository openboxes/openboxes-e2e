import { expect, test } from '@/fixtures/fixtures';
import Navbar from '@/pages/Navbar';
import AppConfig from '@/utils/AppConfig';

test.beforeEach(async ({     
    page,
 }) => {
    await page.goto('./dashboard');
  });

//OBPIH-4622 Users
test('Create user, add default location and auto-login and delete user', async ({navbar, userListPage, createUserPage, editUserPage, page, loginPage, locationChooser}) => {
  test.setTimeout(3 * 60 * 1000);
    await navbar.configurationButton.click();
    await navbar.getNavItem('Users').click();
    await userListPage.createUserButton.click();
    await createUserPage.username.fill('test1');
    await createUserPage.firstName.fill('test1');
    await createUserPage.lastName.fill('test1');
    await createUserPage.password.fill('test1');
    await createUserPage.saveButton.click();
    await expect(editUserPage.userTitle).toContainText('test1 test1');
    await editUserPage.activateUser.click();
    await editUserPage.saveButton.click();
    await editUserPage.authorizationTab.click();
    await editUserPage.defaultRole.click();
    await editUserPage.getUserRole('Manager').click();
    await editUserPage.defaultLocation.click();
    await editUserPage.getDefaultLocation('main location').click();
    await editUserPage.autoLogin.click();
    await editUserPage.saveButton.click();
    await navbar.profileButton.click();
    await navbar.logoutButton.click();
    await loginPage.fillLoginForm('test1', 'test1');
    await loginPage.loginButton.click();
    await expect(page.getByText('My Dashboard')).toBeVisible();
    await navbar.profileButton.click();
    await navbar.logoutButton.click();
    await loginPage.fillLoginForm(AppConfig.instance.users.main.username, AppConfig.instance.users.main.password);
    await loginPage.loginButton.click();
    await locationChooser.getLocation('main location').click();
    await navbar.configurationButton.click();
    await navbar.getNavItem('Users').click();
    await userListPage.searchByName.fill('test1');
    await userListPage.findButton.click();
    await userListPage.getUserToEdit('test1').click();
    await editUserPage.actionButton.click();
    page.on('dialog', dialog => dialog.accept());
    await editUserPage.deleteUserbutton.click();
    await userListPage.searchByName.fill('test1');
    await userListPage.findButton.click();
    await expect(userListPage.userListTable).toContainText('No users returned');
  });

  test('Create and impersonate user', async ({navbar, userListPage, createUserPage, editUserPage, page}) => {
    test.setTimeout(3 * 60 * 1000);
    await navbar.configurationButton.click();
    await navbar.getNavItem('Users').click();
    await userListPage.createUserButton.click();
    await createUserPage.username.fill('test2');
    await createUserPage.firstName.fill('test2');
    await createUserPage.lastName.fill('test2');
    await createUserPage.password.fill('test2');
    await createUserPage.saveButton.click();
    await expect(editUserPage.userTitle).toContainText('test2 test2');
    await editUserPage.activateUser.click();
    await editUserPage.saveButton.click();
    await editUserPage.authorizationTab.click();
    await editUserPage.defaultRole.click();
    await editUserPage.getUserRole('Manager').click();
    await editUserPage.saveButton.click();
    await editUserPage.impersonateButton.click();
    const newPage = await page.waitForEvent('popup');
    await expect(newPage.getByRole('alert')).toContainText('You are impersonating user test2');
    const newPageNavbar = new Navbar(newPage);
    await expect(newPageNavbar.configurationButton).toBeHidden();
    await expect(newPage.getByRole('alert')).toContainText('You are impersonating user test2');
    await newPageNavbar.navbar.getByRole('link', { name: 'Purchasing', exact: true }).click();
    await newPageNavbar.navbar.getByRole('link', { name: 'List Purchase Orders', exact: true }).click();
    await expect(newPage.getByRole('alert')).toContainText('You are impersonating user test2');
    await newPageNavbar.navbar.getByRole('link', { name: 'Outbound', exact: true }).click();
    await newPageNavbar.navbar.getByRole('link', { name: 'Create Outbound Movement', exact: true }).click();
    await expect(newPage.getByRole('alert')).toContainText('You are impersonating user test2');
    await newPageNavbar.navbar.getByRole('link', { name: 'Products', exact: true }).click();
    await newPageNavbar.navbar.getByRole('link', { name: 'List Products', exact: true }).click();
    await expect(newPage.getByRole('alert')).toContainText('You are impersonating user test2');
    await newPage.getByRole('button', {name: 'Logout'}).click();
    await expect(newPage.getByRole('alert')).toBeHidden();
    await newPage.close();
    await editUserPage.actionButton.click();
    page.on('dialog', dialog => dialog.accept());
    await editUserPage.deleteUserbutton.click();
    await userListPage.searchByName.fill('test2');
    await userListPage.findButton.click();
    await expect(userListPage.userListTable).toContainText('No users returned');
  });

  test('Create user with no access global permissions', async ({navbar, userListPage, createUserPage, editUserPage, loginPage, locationChooser, page}) => {
    test.setTimeout(3 * 60 * 1000);
    await navbar.configurationButton.click();
    await navbar.getNavItem('Users').click();
    await userListPage.createUserButton.click();
    await createUserPage.username.fill('test3');
    await createUserPage.firstName.fill('test3');
    await createUserPage.lastName.fill('test3');
    await createUserPage.password.fill('test3');
    await createUserPage.saveButton.click();
    await expect(editUserPage.userTitle).toContainText('test3 test3');
    await editUserPage.activateUser.click();
    await editUserPage.saveButton.click();
    await editUserPage.authorizationTab.click();
    await editUserPage.defaultRole.click();
    await editUserPage.getUserRole('No access').click();
    await editUserPage.saveButton.click();
    await navbar.profileButton.click();
    await navbar.logoutButton.click();
    await loginPage.fillLoginForm('test3', 'test3');
    await loginPage.loginButton.click();
    await expect(locationChooser.emptyLocationChooser).toBeVisible();
    await locationChooser.locationChooserLogoutButton.click();
    await loginPage.fillLoginForm(AppConfig.instance.users.main.username, AppConfig.instance.users.main.password);
    await loginPage.loginButton.click();
    await locationChooser.getLocation('main location').click();
    await navbar.configurationButton.click();
    await navbar.getNavItem('Users').click();
    await userListPage.searchByName.fill('test3');
    await userListPage.findButton.click();
    await userListPage.getUserToEdit('test3').click();
    await editUserPage.authorizationTab.click();
    await editUserPage.addLocationRolesButton.click();
    await editUserPage.clearLocationForLocationRole.click();
    await editUserPage.locationForLocationRole.click();
    await editUserPage.getLocationForLocationRole('main location').click();
    await editUserPage.locationRole.click();
    await editUserPage.getUserRole('Manager').click();
    await editUserPage.saveButtonOnLocationRoleDialog.click();
    await navbar.profileButton.click();
    await navbar.logoutButton.click();
    await loginPage.fillLoginForm('test3', 'test3');
    await loginPage.loginButton.click();
    await expect(locationChooser.getLocation('main location')).toBeVisible();
    await locationChooser.getLocation('main location').click();
    await navbar.profileButton.click();
    await navbar.logoutButton.click();
    await loginPage.fillLoginForm(AppConfig.instance.users.main.username, AppConfig.instance.users.main.password);
    await loginPage.loginButton.click();
    await locationChooser.getLocation('main location').click();
    await navbar.configurationButton.click();
    await navbar.getNavItem('Users').click();
    await userListPage.searchByName.fill('test3');
    await userListPage.findButton.click();
    await userListPage.getUserToEdit('test3').click();
    await editUserPage.actionButton.click();
    page.on('dialog', dialog => dialog.accept());
    await editUserPage.deleteUserbutton.click();
    await userListPage.searchByName.fill('test3');
    await userListPage.findButton.click();
    await expect(userListPage.userListTable).toContainText('No users returned');
  });

  test('Create user with requestor permission in non manage inventory depot', async ({navbar, userListPage, createUserPage, editUserPage, loginPage, locationChooser, page}) => {
    test.setTimeout(3 * 60 * 1000);
    await navbar.configurationButton.click();
    await navbar.getNavItem('Users').click();
    await userListPage.createUserButton.click();
    await createUserPage.username.fill('test4');
    await createUserPage.firstName.fill('test4');
    await createUserPage.lastName.fill('test4');
    await createUserPage.password.fill('test4');
    await createUserPage.saveButton.click();
    await expect(editUserPage.userTitle).toContainText('test4 test4');
    await editUserPage.activateUser.click();
    await editUserPage.saveButton.click();
    await editUserPage.authorizationTab.click();
    await editUserPage.defaultRole.click();
    await editUserPage.getUserRole('Superuser').click();
    await editUserPage.saveButton.click();
    await editUserPage.addLocationRolesButton.click();
    await editUserPage.clearLocationForLocationRole.click();
    await editUserPage.locationForLocationRole.click();
    await editUserPage.getLocationForLocationRole('non manage inventory depot').click();
    await editUserPage.locationRole.click();
    await editUserPage.getUserRole('Requestor').click();
    await editUserPage.saveButtonOnLocationRoleDialog.click();
    await navbar.profileButton.click();
    await navbar.logoutButton.click();
    await loginPage.fillLoginForm('test4', 'test4');
    await loginPage.loginButton.click();
    await expect(locationChooser.getLocation('non manage inventory depot')).toBeVisible();
    await locationChooser.getLocation('non manage inventory depot').click();
    await navbar.profileButton.click();
    await navbar.logoutButton.click();
    await loginPage.fillLoginForm(AppConfig.instance.users.main.username, AppConfig.instance.users.main.password);
    await loginPage.loginButton.click();
    await locationChooser.getLocation('main location').click();
    await navbar.configurationButton.click();
    await navbar.getNavItem('Users').click();
    await userListPage.searchByName.fill('test4');
    await userListPage.findButton.click();
    await userListPage.getUserToEdit('test4').click();
    await editUserPage.actionButton.click();
    page.on('dialog', dialog => dialog.accept());
    await editUserPage.deleteUserbutton.click();
    await userListPage.searchByName.fill('test4');
    await userListPage.findButton.click();
    await expect(userListPage.userListTable).toContainText('No users returned');
  });